% this script assume that we have all the tiles from each WSI (in a single folder) and try to
% pick out 1 representative tile for each WSI, the image name list will be
% generated for downstream processing on HPC or local machine
% assumption: the folder contains only 20x or 40x images
%             save the 20x magnification tile
% 2018 Aug. 9, 2018 by Cheng Lu
function get_dense_nuclei(svs_dir, mask_dir, output_dir)
dbstop if error
if nargin == 0
    if ~ispc
        errorFile = fopen('/home/dxs765/errors_getDense.txt', 'w');
        %combine the epithelial mask with the tumor mask
        addpath(genpath('/mnt/pan/Data7/cxl884/Code'));
        addpath('/home/dxs765/Feature_Extraction');
        addpath('/home/dxs765/First_Project');
        addpath('/home/dxs765/Current_Project');
        addpath(genpath('/home/dxs765/tools/tile_selection_Cheng_method/'));
        addpath('/usr/local/openslide/3.4.1/include/openslide')
        addpath('/usr/local/openslide/3.4.1/lib')
        path = ('/mnt/rstor/CSE_BME_AXM788/data/ECOG_Breast');
        %path = '/mnt/rstor/CSE_BME_AXM788/data/UH_Breast_Histology/breast_odx_2019_8_1';
        path = ('/mnt/rstor/CSE_BME_AXM788/data/tcga_brca_svs/aacruzr-tcga-bca-7effd4ea4c86/');
        base = ('/mnt/rstor/CSE_BME_AXM788/data/tcga_brca_svs/salendra/');
        load('/mnt/rstor/CSE_BME_AXM788/data/tcga_brca_svs_postprocess/img_name_list.mat');
        dirFound = dir('/home/dxs765/tcga_images'); %images already done
        dirFound2 = dir('/mnt/rstor/CSE_BME_AXM788/data/tcga_brca_svs/salendra/images');
        dirFound = [dirFound; dirFound2];
        load('/home/dxs765/Training_Data/TCGA_data.mat'); % *** very important*** data generated by "compileTCGA.m" function
        dirXML = dir('/mnt/rstor/CSE_BME_AXM788/data/UH_Breast_Histology/breast_odx_2019_8_1');
        svsFolder = ('/mnt/rstor/CSE_BME_AXM788/data/tcga_brca_svs/');%('/mnt/rstor/CSE_BME_AXM788/data/UH_Breast_Histology/breast_odx_2019_8_1/');
        xmlFolder = ('/mnt/rstor/CSE_BME_AXM788/data/tcga_brca_svs/aacruzr-tcga-bca-7effd4ea4c86/XML_TCGA_HG/');
        maskFolder = ('/mnt/pan/Data7/hxl735/IDC_QH_collagen_outcome/tumor_mask/tcga/');
        histoMaskFolder = ('/mnt/rstor/CSE_BME_AXM788/data/tcga_brca_svs/salendra/TCGA_BRCA_HistoQC_Results/');
        str_folder_save = ('/home/dxs765/tcga_images');
        % load('/mnt/rstor/CSE_BME_AXM788/data/tcga_brca_svs_postprocess/unextra_img_list.mat'); not sure what this one is
    else
        path = ('C:\Users\danie\OneDrive\Desktop\Pathology');
        path = ('F:\Pathology\tcga_images');
        base = ('F:\Pathology\TCGA');
        load('F:\Pathology\TCGA\masks\image_masks\img_name_list.mat');
        dirFound = dir('F:/Pathology/TCGA/images');
        load('F:/Pathology/Training_Data/TCGA_data.mat');
        xmlFolder = 'F:/Pathology/TCGA/images/';
        svsFolder = xmlFolder;
        str_folder_save = 'F:/Pathology/TCGA/images/'; %where results are saved
        maskFolder = 'F:/Pathology/TCGA/masks/image_masks/';
        % dirFound = dir('C:\Users\danie\OneDrive\Desktop\Pathology\UH_Images');
    end
    
    
    % for i=1:length(img_name_list) %adds everything not already on the processed list onto the processed list
    %     if ~ismember(extractBetween(img_name_list(i),1, length(img_name_list{i}) - 4), final_xml)
    %         final_xml(length(final_xml)+1) = extractBetween(img_name_list(i),1, length(img_name_list{i}) - 4);
    %     end
    % end
    
    %processed_list = {{'TCGA-A7-A425-01Z-00-DX1.812A94B1-0403-4298-A6C5-F71AFD3A9995.svs'}, {'TCGA-AC-A23H-01Z-00-DX1.8E0AE339-1047-4CA5-BFC5-37A3B10FD8B5.svs'}, {'TCGA-AC-A2FE-01Z-00-DX1.C036AE58-3C0D-4DBF-B658-296D03FD6701.svs'}, {'TCGA-AC-A62V-01Z-00-DX1.2D8994FD-58B8-43C1-B99D-AA964E7DFD60.svs'}, {'TCGA-D8-A73W-01Z-00-DX1.2A4B8A37-BE62-42C8-A109-800A7970FF0F.svs'}, {'TCGA-HN-A2OB-01Z-00-DX1.14F1FBFB-4540-43CE-9D79-5BC628640424.svs'}, {'TCGA-LL-A73Z-01Z-00-DX1.C010142E-29C0-411D-9E0E-4B7D8A4C09BF.svs'}, {'TCGA-Z7-A8R5-01Z-00-DX1.3BDB407F-514C-4131-B058-FA1E69154276.svs'}};
    
    dirSVS = dir(sprintf('%s/**/*.svs', path)); %finds all svs files in the current folder or subfolders of myfolder
    
    foundList={};
    %% skip directories with 13 png images already. save in cell array
    for i=3:length(dirFound)
        pngs = dir(sprintf('%s/%s/**/*.png', dirFound(i).folder, dirFound(i).name));
        if length(pngs) == 13
            foundList(length(foundList)+1) = {dirFound(i).name};
        end
    end
end
openslide_load_library();
disp(['OpenSlide version: ', openslide_get_version()])
%dirXML = dir(sprintf('%s/new annotation/*.xml', path));
%I could do this with dir image, then checking the name
%for y = 1: size(dirXML)
%for y = 1:size(dirXML, 1)

%for y= 3*quarter+3:length(final_xml)
if nargin > 0
    start = 1;
    quarter = 0;
    skipAmount = 0;
    endIdx = 1;
else
    if ~ispc
        xmlDir = dir('/mnt/rstor/CSE_BME_AXM788/data/tcga_brca_svs/aacruzr-tcga-bca-7effd4ea4c86/XML_TCGA_HG/**/*.xml');
        maskDir = dir('/mnt/pan/Data7/hxl735/IDC_QH_collagen_outcome/tumor_mask/tcga/**/*tumor_mask.png');
        histMaskDir = dir('/mnt/rstor/CSE_BME_AXM788/data/tcga_brca_svs/**/*mask_use.png');
        dirPatients = '/mnt/rstor/CSE_BME_AXM788/data/TCGA/brca_slides/patient_data/nationwidechildrens.org_clinical_merged_brca.xlsx';
        base = '/home/dxs765/tcga_images/';
    else
        xmlDir = dir('F:\Pathology\tcga\**/*.xml');
        maskDir = dir('F:\Pathology\tcga\masks\**\*_tumor_mask.png');
        histMaskDir = dir('F:\Pathology\tcga\masks\histoQC\**\*_mask_use.png');
        dirPatients = 'C:\Users\danie\OneDrive\Desktop\Pathology\nationwidechildrens.org_clinical_merged_brca.xlsx';
        base = 'F:/Pathology';
    end
    
    start = length(xmlDir) + length(maskDir);
    quarter = ceil((length(final_xml)-start)/4); %break loop down into four parts so we can run in parallel
    start = 0;
    quarter = ceil(length(final_xml) /4);
    endIdx = length(final_xml);
end
mult = 1;

for y=1:endIdx   %start+quarter(mult-1)+1:start + mult*quarter%quarter %length(final_xml)
    if nargin == 0
        if ismember(lower(final_xml(y)), lower(foundList))
            continue
        end
    end
    try
        %xml_name = extractBetween(dirXML(y).name, 1, strlength(dirXML(y).name) - 4);
        if nargin == 0
            xml_name = upper(final_xml{y});
            svs_name = xml_name;
            %if (strcmp(svs_name, xml_name) && isempty(unwantedFolder)) %skip the new annotation folder
            % sprintf('matched xml %s to svs', cell2mat(xml_name))
            %xml_filename=sprintf('%s/%s', dirXML(y).folder, dirXML(y).name);
            svs_filename = [svsFolder xml_name '.svs'];
            name = extractBetween(xml_name,1,12);
            name = name{1};
            xml_page =  5;%8 if it's a tiff
            xml_filename = [maskFolder xml_name '_tumor_mask.png'];
            xmlFlag = ~exist(xml_filename);
            no_mask = 0;
            if ~xmlFlag
                tumor_mask = imread(xml_filename);
            elseif exist([xmlFolder xml_name '.xml'])  % continue
                topLayer= 1;
                xml_filename = [xmlFolder xml_name '.xml'];
                tumor_mask = anno2mask(xml_filename, svs_filename, topLayer, xml_page);
            elseif exist(sprintf('%s/%s.svs/%s.svs_mask_use.png', histoMaskFolder, xml_name, xml_name))
                xml_filename = sprintf('%s/%s.svs/%s.svs_mask_use.png', histoMaskFolder, xml_name, xml_name);
                tumor_mask = imread(xml_filename);
            else
                continue
            end
            maskDir = [base '/images/' name '/'];
            %svs_filename=sprintf('%s/%s', dirSVS(x).folder, dirSVS(x).name);
        else
            tumor_mask = imread(mask_dir);
            svs_filename = svs_dir;
            maskDir = output_dir;
            xml_page = 5;
            [~, full_name, ~] = fileparts(svs_dir);
            name = extractBetween(full_name, 1,12);
            name = name{1};
        end
        skipAmount = skipAmount - 1;
        if skipAmount > 0
            continue
        end
        LcreateFolder(maskDir);
        %   dirSVS(x) = []; %delete the svs so we don't search it any more
        %str_image_local='/home/dxs765/Features2/';
        %str_mask_local='/home/dxs765/Features2/';
        
        %epi_filename = sprintf('/mnt/pan/Data7/hxl735/IDC_QH_collagen_outcome/WSI_epi_mask/ecog/%s_epi_mask.png', name);
        %str_filename = sprintf('/mnt/pan/Data7/hxl735/IDC_QH_collagen_outcome/WSI_epi_mask/ecog/%s_str_mask.png', name);
        
        %% ------------------------------------------------------
        %3 if it's a tif
        
        %tumor_mask2 = imread(epi_filename);
        %ratio = size(tumor_mask, 1) / size(tumor_mask2, 2);
        
        %if ratio >= 1 %scale mask2 up
        %   tumor_mask2 = imresize(tumor_mask, [size(tumor_mask, 1), size(tumor_mask, 2)], 'nearest');
        %else %scale mask up
        %    tumor_mask = imresize(tumor_mask, [size(tumor_mask2, 1), size(tumor_mask2, 2)], 'nearest');
        %end
        %saveTumorMask(imread(svs_filename,'Index', xml_page), and(tumor_mask > 0.1, tumor_mask2 > 0.1), sprintf('%s%s_epi_tumor_mask', str_mask_local, name));
        saveTumorMask(imread(svs_filename,'Index', xml_page), tumor_mask, sprintf('%s%s_tumor_mask', maskDir, name));
        
        set(0, 'DefaultFigureVisible', 'off');
        str_folder_eye_check = maskDir; %directory to save results for "checking by eye"
        num_tile_size=[1000 1000];% the size of the tile to be saved
        num_tile_to_get=10;
        mask_extension = '_tumor_mask.png'; %this corresponds to the mask created through saveTumorMask
        num_mag_to_save=20; % the magnification of the tile to be saved, now only support 20x
        str_folder_save = maskDir; %sprintf('%s/Patches', saveDir);
        
        dir_mask=dir([maskDir sprintf('*%s', mask_extension)]);
        for i=1:length(dir_mask)
            %new folders for each group of sliced images
            folder_save_child = fullfile(str_folder_save,sprintf('%s', name));
            fprintf('Processing %s \n', folder_save_child);
            LcreateFolder(folder_save_child);
            fprintf('on %d/%d image\n',i,length(dir_mask)); %reports current progress vs total images in folder
            idx_mag=[];
            curID=dir_mask(i).name;
            %tmp=strsplit(curID,'_mask');
            tmp = strsplit(curID, '_');
            %curID=tmp{1};
            curID = tmp{1};
            %     im_info=imfinfo([str_image_local curID]);
            
            % Open whole-slide image
            slidePtr = openslide_open(svs_filename);
            % Get whole-slide image properties
            [mppX, mppY, width, height, numberOfLevels, ...
                downsampleFactors, objectivePower] = openslide_get_slide_properties(slidePtr);
            downsampleFactors=round(downsampleFactors);
            % Display properties
            %     disp(['mppX: ',num2str(mppX)])
            %     disp(['mppY: ',num2str(mppY)])
            %     disp(['width: ',num2str(width)])
            %     disp(['height: ',num2str(height)])
            %     disp(['number of levels: ',num2str(numberOfLevels)])
            % %     disp(['downsample factors: ',num2str(downsampleFactors)])
            %     disp(['objective power: ',num2str(objectivePower)])
            if objectivePower==40 || mppX<0.26 %~isempty(idx_mag)% this is a 40x image I uesed | because of the mistake of the image information regarding the objective power (example: TCGA-05-4244-01Z-00-DX1.d4ff32cd-38cf-40ea-8213-45c2b100ac01.svs)%~isempty(idx_mag)% this is a 40x image
                if numberOfLevels>3
                    [ARGB] = openslide_read_whole_level_im(slidePtr,'level',3); %changed by daniel from 3 at first
                    %             factor_tilepicing=8;
                    factor_tilepicing=downsampleFactors(4); %changed from 4 originally
                end
                if numberOfLevels==3
                    [ARGB] = openslide_read_whole_level_im(slidePtr,'level',2);
                    %             factor_tilepicing=4;
                    factor_tilepicing=downsampleFactors(3);
                end
                
                if numberOfLevels<3
                    continue;
                end
            else% this is a 20x image % i=127
                if numberOfLevels==3
                    [ARGB] = openslide_read_whole_level_im(slidePtr,'level',2);
                    factor_tilepicing=downsampleFactors(3);
                else
                    if numberOfLevels == 9
                        [ARGB] = openslide_read_whole_level_im(slidePtr,'level',3);
                        factor_tilepicing = downsampleFactors(4);
                    else
                        continue;
                    end
                end
            end
            
            cur_im_lowres=ARGB(:,:,2:4);
            % Display RGB part
            %     figure(1)
            %     imshow(cur_im_lowres);
            %     set(gcf,'Name','WSI','NumberTitle','off')
            
            % read the mask_use
            %cur_im_bw_QC=imread([str_esMask_hpc curID '_mask_use.png']);
            
            cur_im_bw_QC=imread([maskDir curID mask_extension]);
            cur_im_bw_QC=imresize(cur_im_bw_QC,[size(cur_im_lowres,1) size(cur_im_lowres,2)]);
            %         LshowBWonIM(cur_im_bw_QC,cur_im_lowres(:,:,1),1);
            %         LshowBWonIM(cur_im_bw_QC,cur_im_lowres(:,:,2));
            %         LshowBWonIM(cur_im_bw_QC,cur_im_lowres(:,:,3));
            
            % begin to pick a tile and save it
            flag_s=1;
            %     I_show
            R=cur_im_lowres(:,:,1);
            G=cur_im_lowres(:,:,2);
            B=cur_im_lowres(:,:,3);
            %get ink mask
            bw_R_ink=R<100;%tries to filter out red pen.
            bw_R=R<180;%show(bw_R)%show(R) show(cur_im_bw_QC)
            if nnz(~cur_im_bw_QC) == 0 % if we don't have a tumor mask, then we need more rigorous checking. remove the green region
                bw_G_ink=G > 50;
                bw_B_good=B>50;
                white_area = G + B + R < 40;
                cur_im_bw_QC = ~bw_G_ink & bw_B_good & ~white_area;
                bw_R_ink=R>100;
            end
            bw_R=cur_im_bw_QC&bw_R&~bw_R_ink;
            % LshowBWonIM(bw_R,R,2);
            %%% save the high mag tile into folder
            bw_tile_out=bw_R;
            set_tiles_HH_all=[];
            idx_tiles=0;
            while idx_tiles<num_tile_to_get
                %         num_tile_to_get=num_tile_to_get-1;
                %try
                idx_tiles=idx_tiles+1;
                bw_R=bw_R&bw_tile_out;
                if objectivePower==40 || mppX<0.26 %~isempty(idx_mag)% this is a 40x image I uesed | because of the mistake of the image information regarding the objective power (example: TCGA-05-4244-01Z-00-DX1.d4ff32cd-38cf-40ea-8213-45c2b100ac01.svs)%~isempty(idx_mag)% this is a 40x image
                    if num_mag_to_save==20
                        [set_tiles_HH,protion_HH]=LselectBestTile_sliding_window_method_v2(bw_R,cur_im_bw_QC,round(num_tile_size(1)/factor_tilepicing*2),cur_im_lowres,0);
                        set_tiles_HH_all(idx_tiles,:)=set_tiles_HH;
                        %                 bw_tile_out=ones(size(bw_R,1),size(bw_R,2));
                        bw_tile_out(set_tiles_HH(2):set_tiles_HH(2)+set_tiles_HH(3)-1,set_tiles_HH(1):set_tiles_HH(1)+set_tiles_HH(4)-1)=0;
                        %                 saveas(gca,[str_folder_eye_check curID '_tile_selection.png']);
                        close all;
                        set_tiles_HH_save=set_tiles_HH*factor_tilepicing;
                        set_tiles_HH_save(3:4)=num_tile_size*2;
                        
                        if set_tiles_HH_save(1) + set_tiles_HH_save(3)- 1 >= width
                            set_tiles_HH_save(1)= width-set_tiles_HH_save(3);
                        end
                        if set_tiles_HH_save(2) + set_tiles_HH_save(4) - 1 >= height
                            set_tiles_HH_save(2)= height-set_tiles_HH_save(4);
                        end
                        
                        [ARGB] = openslide_read_region(slidePtr,set_tiles_HH_save(1),set_tiles_HH_save(2),set_tiles_HH_save(3),set_tiles_HH_save(4),'level',0);
                        cur_tile_2_save=ARGB(:,:,2:4);
                        cur_tile_2_save=imresize(cur_tile_2_save,0.5);
                        set_tiles_HH_save(3:4)=num_tile_size;
                    else
                        [set_tiles_HH,protion_HH]=LselectBestTile_sliding_window_method_v2(bw_R,cur_im_bw_QC,round(num_tile_size(1)/factor_tilepicing),cur_im_lowres,0);
                        set_tiles_HH_all(idx_tiles,:)=set_tiles_HH;
                        %                 bw_tile_out=ones(size(bw_R,1),size(bw_R,2));
                        bw_tile_out(set_tiles_HH(2):set_tiles_HH(2)+set_tiles_HH(3)-1,set_tiles_HH(1):set_tiles_HH(1)+set_tiles_HH(4)-1)=0;
                        %                 saveas(gca,[str_folder_eye_check curID '_tile_selection.png']);
                        close all;
                        set_tiles_HH_save=set_tiles_HH*factor_tilepicing;
                        set_tiles_HH_save(3:4)=num_tile_size;
                        %             set_tiles_HH_save=set_tiles_HH*factor_tilepicing;
                        %             set_tiles_HH_save(3:4)=num_tile_size;
                        [ARGB] = openslide_read_region(slidePtr,set_tiles_HH_save(1),set_tiles_HH_save(2),set_tiles_HH_save(3),set_tiles_HH_save(4),'level',0);
                        cur_tile_2_save=ARGB(:,:,2:4); %sets it to 20 magnification no matter what, which corresponds to our tumor size!
                    end
                else% this is a 20x image
                    [set_tiles_HH,protion_HH]=LselectBestTile_sliding_window_method_v2(bw_R,cur_im_bw_QC,round(num_tile_size(1)/factor_tilepicing),cur_im_lowres,0);
                    set_tiles_HH_all(idx_tiles,:)=set_tiles_HH;
                    %                 bw_tile_out=ones(size(bw_R,1),size(bw_R,2));
                    bw_tile_out(set_tiles_HH(2):set_tiles_HH(2)+set_tiles_HH(3)-1,set_tiles_HH(1):set_tiles_HH(1)+set_tiles_HH(4)-1)=0;
                    %             saveas(gca,[str_folder_eye_check curID '_tile_selection.png']);
                    close all;
                    set_tiles_HH_save=set_tiles_HH*factor_tilepicing;
                    set_tiles_HH_save(3:4)=num_tile_size;
                    [ARGB] = openslide_read_region(slidePtr,set_tiles_HH_save(1),set_tiles_HH_save(2),set_tiles_HH_save(3),set_tiles_HH_save(4),'level',0);
                    cur_tile_2_save=ARGB(:,:,2:4);
                end
                % catch ME
                %    fprintf(errorFile, sprintf('%s image has length %d\n', length(set_tiles_HH_save))); %s\n %s\n %s\n%s\n\n', name, length(set_tiles_HH_save), ME.identifier, ME.message, ME.cause, ME.stack));
                %    continue
                % end
                %     show(cur_tile_2_save)
                newFolder=sprintf('%s/%s_%d_%d/', folder_save_child, name, set_tiles_HH_save(1), set_tiles_HH_save(2));
                LcreateFolder(newFolder); %this one is weird
                fullfile_name = fullfile(newFolder, sprintf('%s_%d_%d.png', name, set_tiles_HH_save(1), set_tiles_HH_save(2)));
                if ~exist(fullfile_name, 'file')
                    %imwrite(cur_tile_2_save,sprintf('%s%s_xpos%d_ypos%d_w%d_h%d_@%dx.png',folder_save_child,curID(1:12),set_tiles_HH_save(1),set_tiles_HH_save(2),set_tiles_HH_save(3),set_tiles_HH_save(4),num_mag_to_save));
                    imwrite(cur_tile_2_save, fullfile_name);
                else
                    continue
                end
                %actual tile size/shrunken tile size gives the ratio that things were shrunk.
                %adjustedRowInd = num_tile_size(1)/set_tiles_HH_save(3) * set_tiles_HH_save(1);
                %adjustedColInd = num_tile_size(2)/set_tiles_HH_save(4) * set_tiles_HH_save(2);
                adjustedRowInd=set_tiles_HH_save(1);
                adjustedColInd=set_tiles_HH_save(2);
                %                     try
                %                         if size(full_epi, 1) > 10 %issue would arise when there was no epi mask, but it still tried going into this if statement
                %                             full_epi= imresize(full_epi, [size(cur_im_bw_QC, 1), size(cur_im_bw_QC, 2)]);
                %                             %full_epi= imresize(full_epi, [gca.ylim, gca.xlim]);
                %                             %full_epi = imresize(full_epi, [size(cur_im_bw_QC,1) size(cur_im_bw_QC,2)]); %we want to resize based on the image that the main dude is BASED on. not sure where to actually find that though
                %                             imwrite(full_epi(adjustedRowInF:adjustedRowInd+num_tile_size(1), adjustedColInF:adjustedColInd + num_tile_size(2)), sprintf('%s/epi_mask_%s_%d_%d.png', newFolder, name, set_tiles_HH_save(1), set_tiles_HH_save(2)));
                %                         end
                %                     catch ME
                %                         sprintf('OUT OF BOUNDS. rows of epi %d, largest requested row %d. cols of epi %d, largest requested col %d', size(full_epi, 1), adjustedColInd+num_tile_size(1), size(full_epi, 2), adjustedColInd+num_tile_size(2))
                %                     end
                
            end
            show(cur_im_lowres);
            hold on;
            for k=1:size(set_tiles_HH_all,1)
                set_tiles_HH=set_tiles_HH_all(k,:);
                %       -plot(cc,cr,'b*','MarkerSize',8);
                rectangle('Position',set_tiles_HH,'EdgeColor','b','LineWidth',3);
            end
            hold off;
            saveas(gca,[str_folder_eye_check curID '_tile_selection.png']);
            %}
            % Close whole-slide image, note that the slidePtr must be removed manually
            openslide_close(slidePtr)
            clear slidePtr
            
        end
        %     if (~found)
        %         sprintf('no svs found for xml %s', dirXML(y).name)
        %     end
    catch ME
        warning(sprintf('%s\n%s\n%s'), ME.message, ME.stack, ME.cause);
        openslide_close(slidePtr)
        clear slidePtr
        continue
    end
end
fclose(errorFile);
% Unload library
openslide_unload_library
